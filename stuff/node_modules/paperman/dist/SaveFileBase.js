"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaveFileBase = void 0;
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var GameInfo_1 = require("./GameInfo");
var Operators_1 = require("./Operators");
var bufferSize = 200;
/**
 * base SaveFile class to reduce code repition while allowing for different forms of files
 */
var SaveFileBase = /** @class */ (function () {
    function SaveFileBase(file, logger) {
        var _this = this;
        /**
         * Open the file for reading
         */
        this.read = function () {
            // This rule is pretty silly. It should just error out if every case of the enum isn't covered.
            switch (_this.gameInfo.Compressed) {
                case GameInfo_1.CompressMode.Unzipped:
                    return _this.readFlat();
                case GameInfo_1.CompressMode.Duplicate:
                    return _this.readZip();
                case GameInfo_1.CompressMode.Split:
                    return _this.readZipAll();
            }
        };
        this.file = file;
        this.logger = logger;
        this.gameInfo = this.setGameInfo(file);
        if (this.logger !== undefined) {
            this.logger.next("Detected game: " + this.gameInfo.Name);
        }
    }
    /**
     * Reads the file and returns buffered chunks of writable plaintext save data.
     */
    SaveFileBase.prototype.parse = function () {
        return this.read().pipe(Operators_1.bufferClausewitz(this.gameInfo), Operators_1.parseClausewitz(this.gameInfo, this.logger), operators_1.concatMap(function (line) { return [line, '\n']; }), operators_1.skipLast(1), // don't end the file with a newline, this crashes the game
        operators_1.bufferCount(bufferSize), operators_1.map(function (buf) { return buf.join(''); }));
    };
    /**
     * Find the file we want and start reading it.
     */
    SaveFileBase.prototype.readZip = function () {
        var _this = this;
        var buffer = this.openZip().then(function (zip) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, zip
                        .filter(function (path) { return path !== 'meta'; })[0]
                        .async('nodebuffer')];
            });
        }); });
        return rxjs_1.from(buffer);
    };
    /**
     * Start reading all files inside the zip.
     */
    SaveFileBase.prototype.readZipAll = function () {
        var _this = this;
        return rxjs_1.from(this.openZip()).pipe(operators_1.reduce(function (acc, value) {
            value.forEach(function (_, file) {
                acc.push(file);
            });
            acc.sort(function (a, b) {
                // meta is always first
                if (a.name === 'meta') {
                    return -1;
                }
                else if (b.name === 'meta') {
                    return 1;
                }
                // ai is always last
                if (a.name === 'ai') {
                    return 1;
                }
                else if (b.name === 'ai') {
                    return -1;
                }
                return 0;
            });
            return acc;
        }, []), operators_1.concatMap(function (list) { return rxjs_1.from(list); }), operators_1.concatMap(function (file) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, file.async('nodebuffer')];
        }); }); }));
    };
    return SaveFileBase;
}());
exports.SaveFileBase = SaveFileBase;
exports.default = SaveFileBase;
