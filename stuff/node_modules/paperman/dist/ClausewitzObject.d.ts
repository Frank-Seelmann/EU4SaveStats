/**
 * Represents a single token in a Clausewitz save file
 */
export interface IClausewitzObject<T extends Identifiers> {
    identifier: T;
    value: IdentifierByType[T];
}
export declare type ClausewitzObject = IClausewitzObject<Identifiers>;
/**
 * Shorthand function for creating a IClausewitzObject of a value-less type.
 * @param identifier The type of the object.
 */
export declare function createClausewitzObject<T extends IdentifiersWithoutValues>(identifier: T): IClausewitzObject<T>;
/**
 * Shorthand function for creating a IClausewitzObject of a valued type.
 * @param identifier The type of the object.
 * @param value The value of the object.
 */
export declare function createClausewitzObject<T extends IdentifiersWithValues>(identifier: T, value: IdentifierByType[T]): IClausewitzObject<T>;
/**
 * Shorthand function for creating a IClausewitzObject of an arbitrary game type.
 * @param value The arbitrary type.
 */
export declare function createClausewitzObject<T extends 'Other'>(identifier: number): IClausewitzObject<'Other'>;
/**
 * IClausewitzObject<T> type assertion
 */
export declare function isClausewitzObjectOfIdentifier<T extends Identifiers>(x: ClausewitzObject, y: T): x is IClausewitzObject<T>;
export interface IdentifierByTypeNoNull {
    IntegerA: number;
    FloatA: number;
    Boolean: boolean;
    StringA: string;
    IntegerB: number;
    StringB: string;
    FloatB: number;
    FloatC: number;
    Other: number;
}
export interface IdentifierByTypeOnlyNull {
    Equals: null;
    OpenGroup: null;
    CloseGroup: null;
    BooleanYesA: null;
    BooleanYesB: null;
    BooleanNo: null;
}
export interface IdentifierByType extends IdentifierByTypeNoNull, IdentifierByTypeOnlyNull {
}
export declare type IdentifiersWithValues = keyof IdentifierByTypeNoNull;
export declare type IdentifiersWithoutValues = keyof IdentifierByTypeOnlyNull;
export declare type Identifiers = IdentifiersWithValues | IdentifiersWithoutValues;
