"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var get_section_offset = function (exe, s) {
    var start_of_section = exe.indexOf(s);
    var VirtualAddress = exe.readInt32LE(start_of_section + 8 + 4);
    var PointerToRawData = exe.readInt32LE(start_of_section + 8 + 4 + 4 + 4);
    return VirtualAddress - PointerToRawData;
};
var function_starts_with = Buffer.from([0x48, 0x83, 0xEC, 0x28, 0x4C, 0x8D, 0x05]);
var SUB_OR_ADD = 0x83;
var LEA = 0x8D;
var CALL = 0xE8;
var MOVI = 0xC7;
var MOV_EDX = 0xBA;
var MOV_TO_IGNORE = 0xC6;
var JMP = 0xE9;
var IS_REX = function (n) { return (n & 240) === 64; };
var GenerateDictionary = function (exe) {
    var data_offset = get_section_offset(exe, ".rdata") - get_section_offset(exe, ".text");
    var start_of_function = exe.indexOf(function_starts_with);
    var workarea = exe.slice(start_of_function);
    var lastvalue = 11; // hack for hardcoded number for id
    var lastrcx;
    var lastr8;
    var dict = {
        VERSION: "GENERATED"
    };
    while (true) {
        if (IS_REX(workarea[0]) && workarea[1] == SUB_OR_ADD) {
            workarea = workarea.slice(4);
        }
        else if (IS_REX(workarea[0]) && workarea[1] == LEA) {
            if (workarea[2] == 0x0D) {
                var dest = workarea.readInt32LE(3) + 7 - data_offset;
                var data = workarea.slice(dest);
                lastrcx = data.toString('utf8', 0, data.indexOf(0x00));
            }
            else if (workarea[2] == 0x05) {
                var dest = workarea.readInt32LE(3) + 7 - data_offset;
                var data = workarea.slice(dest);
                lastr8 = data.toString('utf8', 0, data.indexOf(0x00));
            }
            workarea = workarea.slice(7);
        }
        else if (workarea[0] == CALL) {
            if (lastrcx !== undefined && lastrcx !== "") {
                dict[lastvalue] = lastrcx;
                lastrcx = "";
            }
            else if (lastr8 !== undefined && lastr8 !== "") {
                dict[lastvalue] = lastr8;
                lastr8 = "";
            }
            workarea = workarea.slice(5);
        }
        else if (workarea[0] == MOVI) {
            // all we care about is the value
            lastvalue = workarea.readInt32LE(6);
            workarea = workarea.slice(10);
        }
        else if (workarea[0] == MOV_TO_IGNORE) {
            // ignore
            workarea = workarea.slice(7);
        }
        else if (workarea[0] == MOV_EDX) {
            // all we care about is the value
            lastvalue = workarea.readInt32LE(1);
            workarea = workarea.slice(5);
        }
        else if (workarea[0] == JMP) {
            break;
        }
        else {
            throw new Error("unexpected data");
        }
    }
    return dict;
};
exports.default = GenerateDictionary;
