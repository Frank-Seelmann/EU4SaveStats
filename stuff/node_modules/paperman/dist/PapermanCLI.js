"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PapermanCLI = void 0;
var fs_1 = require("fs");
var rxjs_1 = require("rxjs");
var minimist = require("minimist");
var Paperman_1 = require("./Paperman");
var findPackage_1 = require("./Util/findPackage");
var GenerateDictionary_1 = require("./GenerateDictionary");
/**
 * Command line interface for Paperman.
 */
var PapermanCLI = /** @class */ (function () {
    /**
     * Create instance.
     * @param argv - this is node.js argv(``process.argv``)
     */
    function PapermanCLI(process) {
        this.argv = minimist(process.argv.slice(2));
        this.process = process;
        if (this.argv.h || this.argv.help) {
            this.showHelp();
            this.process.exit(0);
        }
        if (this.argv.v || this.argv.version) {
            this.showVersion();
            this.process.exit(0);
        }
    }
    /**
     * execute to parse save file.
     */
    PapermanCLI.prototype.exec = function () {
        var _this = this;
        var filename = this.argv._[0];
        var exepath = this.argv._[1];
        var dictionary;
        if (exepath !== undefined) {
            try {
                var exe = fs_1.readFileSync(exepath);
                dictionary = GenerateDictionary_1.default(exe);
                this.process.stdout.write("Successfully generated dictionary.\n");
            }
            catch (err) {
                this.process.stdout.write("Failed to load dictionary from exe: " + err.message + "\n");
            }
        }
        if (filename !== undefined) {
            var inst = new Paperman_1.Paperman(filename);
            this.process.stdout.write("Paperman save game will be written to " + inst.outname + "\n");
            var logger = new rxjs_1.Subscriber(function (message) { _this.process.stdout.write(message + "\n"); });
            inst.exec(logger, dictionary).then(function () { _this.process.exitCode = 0; }, function (err) {
                _this.process.stdout.write("Error: " + err.message + "\n");
                _this.process.exitCode = 1;
            });
        }
        else {
            this.showHelp();
            this.process.exitCode = 1;
        }
    };
    /**
     * print usage information
     */
    PapermanCLI.prototype.showHelp = function () {
        this.process.stdout.write('Usage: paperman [file] [optional: game exe]\n');
        this.process.stdout.write('\n');
        this.process.stdout.write('Options:\n');
        this.process.stdout.write('  -h\toutput usage information\n');
        this.process.stdout.write('  -v\toutput the version number\n');
    };
    /**
     * print the version
     */
    PapermanCLI.prototype.showVersion = function () {
        var packageObj = findPackage_1.default();
        if (packageObj !== undefined) {
            this.process.stdout.write(packageObj.version);
        }
        else {
            this.process.stdout.write('0.0.0');
        }
    };
    return PapermanCLI;
}());
exports.PapermanCLI = PapermanCLI;
if (process.argv[1] !== undefined) {
    fs_1.promises.realpath(process.argv[1]).then(function (executedFilePath) {
        if (executedFilePath === __filename) {
            var cli = new PapermanCLI(process);
            cli.exec();
        }
    }).catch(function (err) {
        process.stderr.write("Error: " + err + "\n");
        process.exit(1);
    });
}
