/// <reference types="node" />
import * as JSZip from 'jszip';
import { Observable, Observer } from 'rxjs';
import { GameInfo } from './GameInfo';
/**
 * base SaveFile class to reduce code repition while allowing for different forms of files
 */
export declare abstract class SaveFileBase<T> {
    /**
     * What game this save is for
     */
    readonly gameInfo: GameInfo;
    /**
     * The input file
     */
    readonly file: T;
    /**
     * A possible logger to receive info and warning messages about the conversion process.
     */
    private logger;
    constructor(file: T, logger?: Observer<string>);
    /**
     * Reads the file and returns buffered chunks of writable plaintext save data.
     */
    parse(): Observable<string>;
    /**
     * Open the file for reading
     */
    read: () => Observable<Buffer>;
    /**
     * Should return the appropriate GameInfo for the input file.
     * @param file The file argument to get GameInfo from
     */
    protected abstract setGameInfo(file: T): GameInfo;
    /**
     * Open the file for reading as a flat save file.
     */
    protected abstract readFlat(): Observable<Buffer>;
    /**
     * Find the file we want and start reading it.
     */
    protected readZip(): Observable<Buffer>;
    /**
     * Open the zip file for reading.
     */
    protected abstract openZip(): Promise<JSZip>;
    /**
     * Start reading all files inside the zip.
     */
    protected readZipAll(): Observable<Buffer>;
}
export default SaveFileBase;
