"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = require("path");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var SaveFileNode_1 = require("./SaveFileNode");
var noop = function () { return; };
var testPath;
beforeAll(function () {
    testPath = path_1.join(__dirname, '../../test/');
});
it('can load a fake save game', function (done) {
    var f = new SaveFileNode_1.default(path_1.join(testPath, 'allidentifiers.eu4'));
    var buf = [];
    f.parse().subscribe(function (token) { return buf.push(token); }, done, function () {
        expect(buf.join('')).toBe('={\n}\n1\n0.001\nno\nyes\n"foo"\n1\n"bar"\n27292.72034yesno\ncolor');
        done();
    });
});
it('can load a ck2 save game', function (done) {
    var f = new SaveFileNode_1.default(path_1.join(testPath, 'ironman_1066.ck2'));
    f.parse().pipe(operators_1.take(100)).subscribe(noop, done, done);
});
it('can load an eu4 save game', function (done) {
    var f = new SaveFileNode_1.default(path_1.join(testPath, 'ironman_1444.eu4'));
    f.parse().pipe(operators_1.take(100)).subscribe(noop, done, done);
});
it('can load a hoi4 save game', function (done) {
    var f = new SaveFileNode_1.default(path_1.join(testPath, 'ironman_1936.hoi4'));
    f.parse().pipe(operators_1.take(100)).subscribe(noop, done, done);
});
it('should reject files with unknown extensions', function () {
    var f;
    try {
        f = new SaveFileNode_1.default(path_1.join(testPath, 'allidentifiers'));
    }
    catch (err) {
        expect(err.message).toBe('could not guess game from extension \'\'');
    }
    expect(f).toBeUndefined();
});
it('can read CompressMode.Split save files', function (done) {
    var f = new SaveFileNode_1.default(path_1.join(testPath, 'split.eu4'));
    var buf = [];
    f.parse().subscribe(function (chunk) { return buf.push(chunk); }, done, function () {
        expect(buf.join('').split('\n')).toEqual(['"first"', '"second"', '"third"']);
        done();
    });
});
it('can log information', function (done) {
    var logs = [];
    var logger = new rxjs_1.Subscriber(function (log) { return logs.push(log); });
    var f = new SaveFileNode_1.default(path_1.join(testPath, 'allidentifiers.eu4'), logger);
    f.parse().subscribe(noop, done, function () {
        expect(logs).toContain('Detected game: Europa Universalis IV');
        done();
    });
});
