/// <reference types="node" />
import { Observer } from 'rxjs';
import { ClausewitzObject, Identifiers } from '../ClausewitzObject';
export declare enum CompressMode {
    /**
     * The save is not zipped at all
     */
    Unzipped = 0,
    /**
     * There's a meta file duplicating information for faster reading
     */
    Duplicate = 1,
    /**
     * Game information is split up into many files that should be merged into one
     */
    Split = 2
}
/**
 * Object containing all information necessary for translating a binary save game into one that will be loaded by the game
 */
export interface GameInfo {
    Name: string;
    Extension: string;
    Compressed: CompressMode;
    MagicNumber: Buffer | null;
    MagicString: string;
    Dictionary: {
        VERSION?: string;
        [index: number]: string;
    };
    FormatRules: FormatRule[];
    InitiateParser(parser: Parser): void;
}
export declare type FormatRule = (parser: Parser, value: ClausewitzObject) => boolean;
export declare type FormatRuleData = Record<number, unknown>;
export interface Parser {
    parents: Array<Identifiers | number>;
    parent: Identifiers | number;
    lastKey: Identifiers | number;
    lastIdentifier: Identifiers | number;
    gameInfo: GameInfo;
    logger: Observer<string> | undefined;
    dropKeyValuePair: number | undefined;
    put(value: string): void;
    lineFeed(): void;
    push(indent?: boolean): void;
}
