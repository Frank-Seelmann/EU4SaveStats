"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CK2 = void 0;
var ClausewitzObject_1 = require("../ClausewitzObject");
var GameInfo_1 = require("./GameInfo");
var CK2Dict_1 = require("./CK2Dict");
/**
 * GameInfo for Crusader Kings II
 */
exports.CK2 = {
    Name: 'Crusader Kings II',
    Extension: '.ck2',
    Compressed: GameInfo_1.CompressMode.Duplicate,
    MagicNumber: Buffer.from('CK2bin'),
    MagicString: 'CK2txt',
    Dictionary: CK2Dict_1.default,
    FormatRules: [],
    InitiateParser: function (parser) {
        parser.parent = 2; // we'll pretend this unused low value is the magic number
        parser.put('\t'); // just one to start us off
    }
};
(function () {
    var flagsListParents = {
        10434: {}
    };
    exports.CK2.FormatRules.push(function stringWithoutQuotesBecauseFlags(parser, value) {
        if (ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'StringA') && typeof parser.parent === 'number') {
            if (flagsListParents[parser.parent] !== undefined) {
                parser.push();
                parser.put(value.value.trim()); // trim to get rid of \n
                if (parser.lastIdentifier === 'Equals') {
                    parser.lineFeed();
                }
                return true;
            }
        }
        return false;
    });
})();
(function () {
    var stringKeyParents = {
        10007: {},
        10052: {},
        11614: {}
    };
    exports.CK2.FormatRules.push(function stringWithoutQuotesBecauseOfParent(parser, value) {
        if (ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'StringA') || ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'StringB')) {
            if (parser.lastIdentifier !== 'Equals') {
                if (typeof parser.parent === 'number' && stringKeyParents[parser.parent] !== undefined) {
                    parser.push();
                    parser.put(value.value);
                    return true;
                }
            }
        }
        return false;
    });
})();
(function () {
    var dataListParents = {
        280: {},
        10008: {},
        10181: {},
        10182: {},
        10185: {},
        10186: {},
        11972: {},
        12772: {}
    };
    exports.CK2.FormatRules.push(function dataAsSingleLine(parser, value) {
        if ((typeof parser.parent === 'number' && dataListParents[parser.parent] !== undefined)
            || parser.parents[parser.parents.length - 2] === 11614) { // liege_troops
            if (ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'CloseGroup')) {
                parser.put('}');
                parser.lineFeed();
                parser.parents.pop();
                return true;
            }
            if (parser.lastIdentifier !== 'OpenGroup') {
                parser.put(' ');
            }
            if (ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'IntegerA')) {
                parser.put(value.value.toString());
            }
            else if (ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'FloatA')) {
                parser.put(value.value.toFixed(3));
            }
            else if (ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'FloatC')) {
                parser.put(value.value.toFixed(5));
            }
            else {
                throw new Error('unexpected value in data block');
            }
            return true;
        }
        return false;
    });
    exports.CK2.FormatRules.push(function newlineBeforeOpenGroup(parser, value) {
        if (ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'OpenGroup')) {
            if ((typeof parser.lastKey === 'number' && dataListParents[parser.lastKey] !== undefined)
                || parser.parent === 11614) {
                return false;
            }
            parser.lineFeed(); // this is new
            parser.push();
            parser.put('{');
            parser.lineFeed();
            parser.parent = parser.lastKey;
            return true;
        }
        return false;
    });
})();
(function () {
    var quotelessValueKeys = {
        13366: {}
    };
    exports.CK2.FormatRules.push(function stringWithoutQuotesBecauseOfKey(parser, value) {
        if (ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'StringB') && typeof parser.lastKey === 'number') {
            if (quotelessValueKeys[parser.lastKey] !== undefined) {
                parser.put(value.value);
                parser.lineFeed();
                return true;
            }
        }
        return false;
    });
})();
exports.default = exports.CK2;
