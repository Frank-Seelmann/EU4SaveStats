"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EU4 = void 0;
var ClausewitzObject_1 = require("../ClausewitzObject");
var numberToDate_1 = require("../Util/numberToDate");
var EU4Dict_1 = require("./EU4Dict");
var GameInfo_1 = require("./GameInfo");
/**
 * GameInfo for Europa Universalis IV
 */
exports.EU4 = {
    Name: 'Europa Universalis IV',
    Extension: '.eu4',
    Compressed: GameInfo_1.CompressMode.Split,
    MagicNumber: Buffer.from('EU4bin'),
    MagicString: 'EU4txt',
    Dictionary: EU4Dict_1.default,
    FormatRules: [],
    InitiateParser: function () { return; }
};
exports.EU4.Dictionary[14338] = 'num_of_captured_ships_with_boarding_doctrine';
exports.EU4.FormatRules.push(function integerInTopLevelProvincesScope(parser, value) {
    if (ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'IntegerA')) {
        if (parser.parent === 10291 && parser.parents.length === 1) { // top level provinces={} only
            parser.push(false);
            parser.put(value.value.toString());
            return true;
        }
    }
    return false;
});
(function () {
    var dateKeys = {
        10317: {},
        10379: {},
        10416: {},
        10420: {},
        10432: {},
        10468: {},
        10469: {},
        10498: {},
        10549: {},
        10570: {},
        10571: {},
        10652: {},
        10798: {},
        11409: {},
        11480: {},
        11482: {},
        11523: {},
        11525: {},
        11529: {},
        11586: {},
        11601: {},
        11612: {},
        11706: {},
        11816: {},
        11817: {},
        11824: {},
        11825: {},
        11870: {},
        11987: {},
        12032: {},
        12441: {},
        12543: {},
        12544: {},
        12643: {},
        12653: {},
        12661: {},
        12771: {},
        12842: {},
        12869: {},
        12926: {},
        12960: {},
        12997: {},
        13025: {},
        13039: {},
        13044: {},
        13065: {},
        13066: {},
        13171: {},
        13184: {},
        13271: {},
        13437: {},
        13594: {},
        13787: {},
        13998: {},
        14152: {},
        14218: {},
        14264: {}
    };
    exports.EU4.FormatRules.push(function integerAsDateBecauseOfKey(parser, value) {
        if (ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'IntegerA') && typeof parser.lastKey === 'number') {
            if (dateKeys[parser.lastKey] !== undefined) {
                parser.push();
                parser.put(numberToDate_1.default(value.value));
                parser.lineFeed();
                return true;
            }
        }
        return false;
    });
})();
(function () {
    var dateParents = {
        13239: {},
        13240: {}
    };
    exports.EU4.FormatRules.push(function integerAsDateBecauseOfParent(parser, value) {
        if (ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'IntegerA') && typeof parser.parent === 'number') {
            if (dateParents[parser.parent] !== undefined) {
                if (parser.lastIdentifier === 'Equals') {
                    parser.put(numberToDate_1.default(value.value));
                    parser.lineFeed();
                }
                else {
                    parser.push();
                    parser.put(value.value.toString());
                }
                return true;
            }
        }
        return false;
    });
})();
exports.EU4.FormatRules.push(function integerRepeatingLine(parser, value) {
    if (ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'IntegerA')) {
        if (parser.lastIdentifier === 'IntegerA') {
            parser.put(' ');
            parser.put(value.value.toString());
            parser.lineFeed();
            return true;
        }
    }
    return false;
});
exports.EU4.FormatRules.push(function floatRepeatingLine(parser, value) {
    if (ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'FloatA')) {
        if (parser.lastIdentifier === 'FloatA') {
            parser.put(' ');
            parser.put(value.value.toFixed(3));
            parser.lineFeed();
            return true;
        }
    }
    return false;
});
(function () {
    var stringKeyParents = {
        10296: {},
        10304: {},
        10338: {},
        10397: {},
        10458: {},
        11585: {},
        11853: {},
        11854: {},
        11872: {},
        11873: {},
        12035: {},
        12271: {},
        12438: {},
        12515: {},
        12516: {},
        13375: {},
        14061: {},
        14062: {},
        14121: {},
        14179: {},
        14300: {},
        14327: {},
        14346: {}
    };
    exports.EU4.FormatRules.push(function stringWithoutQuotesBecauseOfParent(parser, value) {
        if (ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'StringA') || ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'StringB')) {
            if (parser.lastIdentifier !== 'Equals') {
                if ((typeof parser.parent === 'number' && stringKeyParents[parser.parent] !== undefined
                    && parser.parents[parser.parents.length - 2] !== 14427)
                    || (parser.parent === 'IntegerA' && parser.parents[parser.parents.length - 2] === 10291)) {
                    parser.push();
                    parser.put(value.value);
                    return true;
                }
            }
        }
        return false;
    });
})();
exports.EU4.FormatRules.push(function stringWithoutQuotesBecauseHistoryAncestor(parser, value) {
    if (ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'StringB')) {
        if (parser.parent === 'StringA' && parser.parents[parser.parents.length - 2] === 10296) {
            parser.push();
            parser.put(value.value);
            parser.lineFeed();
            return true;
        }
    }
    return false;
});
(function () {
    var tagListParents = {
        10346: {},
        10867: {},
        10921: {},
        11163: {},
        11922: {},
        11923: {},
        11924: {},
        14362: {},
        14363: {}
    };
    exports.EU4.FormatRules.push(function stringRepeatingLineBecauseOfParent(parser, value) {
        if (ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'StringA') && typeof parser.parent === 'number') {
            if (tagListParents[parser.parent] !== undefined) {
                if (parser.lastIdentifier === 'StringA') {
                    parser.put(' ');
                }
                else {
                    parser.push();
                }
                parser.put(value.value);
                return true;
            }
        }
        return false;
    });
})();
exports.EU4.FormatRules.push(function stringWithoutQuotesInTradeDefinitions(parser, value) {
    if (ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'StringA')) {
        if (parser.parent === 350) { // trade
            if (parser.lastKey !== 10293) { // definitions
                parser.push();
                parser.put(value.value);
                return true;
            }
        }
    }
    return false;
});
(function () {
    var quotelessTypeParents = {
        10430: {},
        10457: {},
        10880: {}
    };
    exports.EU4.FormatRules.push(function stringWithoutQuotesBecauseTypeInParent(parser, value) {
        if ((ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'StringA') || ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'StringB')) && typeof parser.parent === 'number') {
            if (quotelessTypeParents[parser.parent] !== undefined && parser.lastKey === 225) { // type
                parser.put(value.value);
                parser.lineFeed();
                return true;
            }
        }
        return false;
    });
})();
(function () {
    var quotelessValueKeys = {
        10025: {},
        10298: {},
        10299: {},
        10300: {},
        10302: {},
        10312: {},
        10339: {},
        10342: {},
        11116: {},
        11117: {},
        11136: {},
        11263: {},
        12754: {},
        12883: {},
        12994: {},
        13379: {},
        13435: {},
        13518: {}
    };
    exports.EU4.FormatRules.push(function stringWithoutQuotesBecauseOfKey(parser, value) {
        if (ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'StringB') && typeof parser.lastKey === 'number') {
            if (quotelessValueKeys[parser.lastKey] !== undefined) {
                parser.put(value.value);
                parser.lineFeed();
                return true;
            }
        }
        return false;
    });
})();
(function () {
    var flagsListParents = {
        10700: {},
        10829: {},
        10891: {},
        12287: {}
    };
    exports.EU4.FormatRules.push(function stringWithoutQuotesBecauseFlags(parser, value) {
        if (ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'StringA') && typeof parser.parent === 'number') {
            if (flagsListParents[parser.parent] !== undefined) {
                parser.push();
                parser.put(value.value.trim()); // trim to get rid of \n
                if (parser.lastIdentifier === 'Equals') {
                    parser.lineFeed();
                }
                return true;
            }
        }
        return false;
    });
})();
(function () {
    var ironmanKeys = {
        10893: {},
        13096: {},
        13705: {}
    };
    exports.EU4.FormatRules.push(function dropAchievementPairs(parser, value) {
        if (parser.parents.length === 0 && ClausewitzObject_1.isClausewitzObjectOfIdentifier(value, 'Other')) {
            if (ironmanKeys[value.value] !== undefined) {
                parser.dropKeyValuePair = value.value;
            }
        }
        return false;
    });
})();
exports.default = exports.EU4;
