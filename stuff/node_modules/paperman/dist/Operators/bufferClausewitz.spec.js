"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var ClausewitzObject_1 = require("../ClausewitzObject");
var GameInfo_1 = require("../GameInfo");
var bufferClausewitz_1 = require("./bufferClausewitz");
var noop = function () { return; };
var testBuffers = function (input, expected) { return function (done) {
    var items = [];
    rxjs_1.from(input)
        .pipe(bufferClausewitz_1.default(GameInfo_1.EU4))
        .subscribe(function (item) { return items.push(item); }, done, function () {
        expect(items).toEqual(expected);
        done();
    });
}; };
describe('should only parse valid save games', function () {
    it('short file', function (done) {
        return rxjs_1.of(Buffer.from('foo'))
            .pipe(bufferClausewitz_1.default(GameInfo_1.EU4))
            .subscribe(noop, function (err) { expect(err.message).toBe('not a valid savegame'); done(); }, function () { done('did not hit error'); });
    });
    it('long file', function (done) {
        return rxjs_1.of(Buffer.from('foo bar')) // longer than 6 characters
            .pipe(bufferClausewitz_1.default(GameInfo_1.EU4))
            .subscribe(noop, function (err) { expect(err.message).toBe('not a valid savegame'); done(); }, function () { done('did not hit error'); });
    });
});
describe('should handle all data types', function () {
    var t = function (octets, expected) {
        return it(expected.identifier, function (done) {
            return rxjs_1.of(Buffer.from('EU4bin'), Buffer.from(octets))
                .pipe(bufferClausewitz_1.default(GameInfo_1.EU4))
                .subscribe(function (value) { return expect(value).toEqual(expected); }, done, done);
        });
    };
    t([0x01, 0x00], ClausewitzObject_1.createClausewitzObject('Equals'));
    t([0x03, 0x00], ClausewitzObject_1.createClausewitzObject('OpenGroup'));
    t([0x04, 0x00], ClausewitzObject_1.createClausewitzObject('CloseGroup'));
    t([0x0C, 0x00, 0x01, 0x00, 0x00, 0x00], ClausewitzObject_1.createClausewitzObject('IntegerA', 1));
    t([0x0D, 0x00, 0x01, 0x00, 0x00, 0x00], ClausewitzObject_1.createClausewitzObject('FloatA', 0.001));
    t([0x0E, 0x00, 0x00], ClausewitzObject_1.createClausewitzObject('Boolean', false));
    t([0x0E, 0x00, 0x01], ClausewitzObject_1.createClausewitzObject('Boolean', true));
    t([0x0F, 0x00, 0x03, 0x00, 0x66, 0x6F, 0x6F], ClausewitzObject_1.createClausewitzObject('StringA', 'foo'));
    t([0x14, 0x00, 0x01, 0x00, 0x00, 0x00], ClausewitzObject_1.createClausewitzObject('IntegerB', 1));
    t([0x17, 0x00, 0x03, 0x00, 0x66, 0x6F, 0x6F], ClausewitzObject_1.createClausewitzObject('StringB', 'foo'));
    t([0x67, 0x01, 0x34, 0x5C, 0x4E, 0x35, 0x00, 0x00, 0x00, 0x00], ClausewitzObject_1.createClausewitzObject('FloatB', 894327860 / 65536 * 2));
    t([0x90, 0x01, 0x12, 0x89, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00], ClausewitzObject_1.createClausewitzObject('FloatC', 755986 / 65536 * 2));
    t([0x99, 0x27], ClausewitzObject_1.createClausewitzObject('BooleanYesA'));
    t([0x4B, 0x28], ClausewitzObject_1.createClausewitzObject('BooleanYesB'));
    t([0x4C, 0x28], ClausewitzObject_1.createClausewitzObject('BooleanNo'));
    t([0x56, 0x00], ClausewitzObject_1.createClausewitzObject('Other', 86));
});
describe('waiting for more data if incomplete buffer', function () {
    it('identifier', testBuffers([
        Buffer.from('EU4bin'),
        Buffer.from([0x01]), Buffer.from([0x00])
    ], [
        ClausewitzObject_1.createClausewitzObject('Equals')
    ]));
    it('IntegerA, IntegerB', testBuffers([
        Buffer.from('EU4bin'),
        Buffer.from([0x0C, 0x00]),
        Buffer.from([0x01]),
        Buffer.from([0x00, 0x00, 0x00])
    ], [
        ClausewitzObject_1.createClausewitzObject('IntegerA', 1)
    ]));
    it('FloatA', testBuffers([
        Buffer.from('EU4bin'),
        Buffer.from([0x0D, 0x00]),
        Buffer.from([0x01]),
        Buffer.from([0x00, 0x00, 0x00])
    ], [
        ClausewitzObject_1.createClausewitzObject('FloatA', 0.001)
    ]));
    it('StringA, StringB', testBuffers([
        Buffer.from('EU4bin'),
        Buffer.from([0x0F, 0x00]),
        Buffer.from([0x03]),
        Buffer.from([0x00]),
        Buffer.from('fo'),
        Buffer.from('o')
    ], [
        ClausewitzObject_1.createClausewitzObject('StringA', 'foo')
    ]));
    it('FloatB', testBuffers([
        Buffer.from('EU4bin'),
        Buffer.from([0x67, 0x01]),
        Buffer.from([0x34, 0x5C, 0x4E, 0x35]),
        Buffer.from([0x00, 0x00, 0x00, 0x00])
    ], [
        ClausewitzObject_1.createClausewitzObject('FloatB', 894327860 / 65536 * 2)
    ]));
});
describe('error if unexpected EOF', function () {
    it('buffer not empty', function (done) {
        return rxjs_1.of(Buffer.from('EU4bin'), Buffer.from([0x01]))
            .pipe(bufferClausewitz_1.default(GameInfo_1.EU4))
            .subscribe(noop, function (err) { expect(err.message).toBe('unexpected EOF'); done(); }, function () { done('did not hit error'); });
    });
    it('expecting value', function (done) {
        return rxjs_1.of(Buffer.from('EU4bin'), Buffer.from([0x0C, 0x00]))
            .pipe(bufferClausewitz_1.default(GameInfo_1.EU4))
            .subscribe(noop, function (err) { expect(err.message).toBe('unexpected EOF'); done(); }, function () { done('did not hit error'); });
    });
});
it('should be able to handle new files mid-stream', testBuffers([
    Buffer.from('EU4bin'),
    Buffer.from([0x0F, 0x00, 0x03, 0x00]),
    Buffer.from('foo'),
    Buffer.from('EU4bin'),
    Buffer.from([0x0F, 0x00, 0x03, 0x00]),
    Buffer.from('bar')
], [
    ClausewitzObject_1.createClausewitzObject('StringA', 'foo'),
    ClausewitzObject_1.createClausewitzObject('StringA', 'bar')
]));
