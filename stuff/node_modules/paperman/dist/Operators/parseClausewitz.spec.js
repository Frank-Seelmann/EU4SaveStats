"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var ClausewitzObject_1 = require("../ClausewitzObject");
var GameInfo_1 = require("../GameInfo");
var parseClausewitz_1 = require("./parseClausewitz");
var noop = function () { return; };
var testParse = function (input, expected, gameInfo) {
    if (gameInfo === void 0) { gameInfo = GameInfo_1.EU4; }
    return function (done) {
        var items = [];
        rxjs_1.from(input)
            .pipe(parseClausewitz_1.default(gameInfo))
            .subscribe(function (item) { return items.push(item); }, done, function () {
            expect(items).toEqual(expected);
            done();
        });
    };
};
describe('should handle all data types', function () {
    var t = function (name, input, expected) {
        return it(name, testParse([input], [expected]));
    };
    t('Equals', ClausewitzObject_1.createClausewitzObject('Equals'), '=');
    t('OpenGroup', ClausewitzObject_1.createClausewitzObject('OpenGroup'), '{');
    t('CloseGroup', ClausewitzObject_1.createClausewitzObject('CloseGroup'), '}');
    t('IntegerA', ClausewitzObject_1.createClausewitzObject('IntegerA', 1), '1');
    t('FloatA', ClausewitzObject_1.createClausewitzObject('FloatA', 0.001), '0.001');
    t('Boolean', ClausewitzObject_1.createClausewitzObject('Boolean', true), 'yes');
    t('Boolean', ClausewitzObject_1.createClausewitzObject('Boolean', false), 'no');
    t('StringA', ClausewitzObject_1.createClausewitzObject('StringA', 'foo'), '"foo"');
    t('IntegerB', ClausewitzObject_1.createClausewitzObject('IntegerB', 1), '1');
    t('StringB', ClausewitzObject_1.createClausewitzObject('StringB', 'bar'), '"bar"');
    t('FloatB', ClausewitzObject_1.createClausewitzObject('FloatB', 894327860 / 65536 * 2), '27292.72034'); // 5 decimals
    t('FloatC', ClausewitzObject_1.createClausewitzObject('FloatC', 755986 / 65536 * 2), '23.07086'); // 5 decimals
    t('BooleanYesA', ClausewitzObject_1.createClausewitzObject('BooleanYesA'), 'yes');
    t('BooleanYesB', ClausewitzObject_1.createClausewitzObject('BooleanYesB'), 'yes');
    t('BooleanNo', ClausewitzObject_1.createClausewitzObject('BooleanNo'), 'no');
    t('Game Identifiers', ClausewitzObject_1.createClausewitzObject(86), 'color');
    t('Unknown Game Identifiers', ClausewitzObject_1.createClausewitzObject(-1), 'unknown-1');
});
it('should be able to deal with a variety of situations', testParse([
    ClausewitzObject_1.createClausewitzObject(110), ClausewitzObject_1.createClausewitzObject('Equals'), ClausewitzObject_1.createClausewitzObject('IntegerA', 10),
    ClausewitzObject_1.createClausewitzObject(86), ClausewitzObject_1.createClausewitzObject('Equals'), ClausewitzObject_1.createClausewitzObject('StringA', 'red'),
    ClausewitzObject_1.createClausewitzObject('IntegerA', 5), ClausewitzObject_1.createClausewitzObject('Equals'), ClausewitzObject_1.createClausewitzObject('OpenGroup'),
    ClausewitzObject_1.createClausewitzObject(86), ClausewitzObject_1.createClausewitzObject('Equals'), ClausewitzObject_1.createClausewitzObject('BooleanYesA'),
    ClausewitzObject_1.createClausewitzObject('StringA', 'foo'),
    ClausewitzObject_1.createClausewitzObject('StringA', 'bar'),
    ClausewitzObject_1.createClausewitzObject('CloseGroup')
], [
    'speed=10',
    'color="red"',
    '5={',
    '\tcolor=yes',
    '\t"foo"',
    '\t"bar"',
    '}'
]));
it('should be able to log information', function (done) {
    var logs = [];
    var logger = new rxjs_1.Subscriber(function (log) { return logs.push(log); });
    rxjs_1.of(ClausewitzObject_1.createClausewitzObject(-1))
        .pipe(parseClausewitz_1.default(GameInfo_1.EU4, logger))
        .subscribe(noop, done, function () {
        expect(logs).toContain('Unknown key -1 (0x-1)');
        done();
    });
});
describe('should be able to drop key value pairs if needed', function () {
    var testGameInfo = {
        Name: 'Europa Universalis IV',
        Extension: '.eu4',
        Compressed: GameInfo_1.CompressMode.Duplicate,
        MagicNumber: Buffer.from('EU4bin'),
        MagicString: 'EU4txt',
        Dictionary: {
            10019: 'add_core',
            10025: 'add_accepted_culture',
            10026: 'remove_accepted_culture'
        },
        FormatRules: [],
        InitiateParser: noop
    };
    testGameInfo.FormatRules.push(function (parser, value) {
        if (value.value === 10019) {
            parser.dropKeyValuePair = 10019;
            return true;
        }
        return false;
    });
    it('identifier = value', testParse([
        ClausewitzObject_1.createClausewitzObject(10025), ClausewitzObject_1.createClausewitzObject('Equals'), ClausewitzObject_1.createClausewitzObject('StringA', 'foo'),
        ClausewitzObject_1.createClausewitzObject(10019), ClausewitzObject_1.createClausewitzObject('Equals'), ClausewitzObject_1.createClausewitzObject('StringA', 'foo'),
        ClausewitzObject_1.createClausewitzObject(10026), ClausewitzObject_1.createClausewitzObject('Equals'), ClausewitzObject_1.createClausewitzObject('StringA', 'foo')
    ], [
        'add_accepted_culture="foo"',
        'remove_accepted_culture="foo"'
    ], testGameInfo));
    it('identifier = { group }', testParse([
        ClausewitzObject_1.createClausewitzObject(10025), ClausewitzObject_1.createClausewitzObject('Equals'), ClausewitzObject_1.createClausewitzObject('OpenGroup'),
        ClausewitzObject_1.createClausewitzObject(10025), ClausewitzObject_1.createClausewitzObject('Equals'), ClausewitzObject_1.createClausewitzObject('StringA', 'foo'),
        ClausewitzObject_1.createClausewitzObject('CloseGroup'),
        ClausewitzObject_1.createClausewitzObject(10019), ClausewitzObject_1.createClausewitzObject('Equals'), ClausewitzObject_1.createClausewitzObject('OpenGroup'),
        ClausewitzObject_1.createClausewitzObject(10025), ClausewitzObject_1.createClausewitzObject('Equals'), ClausewitzObject_1.createClausewitzObject('StringA', 'foo'),
        ClausewitzObject_1.createClausewitzObject(10026), ClausewitzObject_1.createClausewitzObject('Equals'), ClausewitzObject_1.createClausewitzObject('StringA', 'foo'),
        ClausewitzObject_1.createClausewitzObject('CloseGroup'),
        ClausewitzObject_1.createClausewitzObject(10026), ClausewitzObject_1.createClausewitzObject('Equals'), ClausewitzObject_1.createClausewitzObject('OpenGroup'),
        ClausewitzObject_1.createClausewitzObject(10025), ClausewitzObject_1.createClausewitzObject('Equals'), ClausewitzObject_1.createClausewitzObject('StringA', 'foo'),
        ClausewitzObject_1.createClausewitzObject('CloseGroup')
    ], [
        'add_accepted_culture={',
        '\tadd_accepted_culture="foo"',
        '}',
        'remove_accepted_culture={',
        '\tadd_accepted_culture="foo"',
        '}'
    ], testGameInfo));
});
